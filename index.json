{"project": "lco_etc", "project_url": "https://github.com/bradengarretson/lco_etc", "show_commit_url": "https://github.com/bradengarretson/lco_etc/commit/", "hash_length": 8, "revision_to_hash": {"0": "6b8d296a27e83a696818d9aedd57562db2fb2526", "3": "740dab94e91a42693d669ab38fa430e156006495", "4": "1bd4549d783926cea1ae6ee54183eddd6289f9ff", "9": "8749daae8d1b91fb201fbf6ca95d92ea2bd7439b"}, "revision_to_date": {"0": 1721579628000, "3": 1721581505000, "4": 1721597568000, "9": 1721600196000}, "params": {"machine": ["gh-runner"], "python": ["3.10"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.10", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.MemComputation.mem_exposure_time_calc": {"code": "class MemComputation:\n    def mem_exposure_time_calc(self):\n        \"\"\"\n        Benchmark the memory usage of the exposure_time_calc function.\n    \n        This benchmark measures the memory usage when calculating the exposure\n        time, signal-to-noise ratio, and magnitude for various sets of inputs.\n        \"\"\"\n        return [\n            exposure_time_calc(10.0, 20, None, \"sinistro\", \"V\", \"new\", 1.2),\n            exposure_time_calc(None, 15.0, 1.0, \"sinistro\", \"R\", \"half\", 1.2),\n            exposure_time_calc(15, None, 1.0, \"sbig\", \"U\", \"full\", 3),\n            exposure_time_calc(20, 15.0, None, \"spectral\", \"r\", \"new\", 1.5),\n            exposure_time_calc(None, 15.0, 1.0, \"qhy\", \"i\", \"new\", 2.7),\n            exposure_time_calc(5, None, 1.0, \"muscat3\", \"g\", \"new\", 1.2),\n            exposure_time_calc(None, 15.0, 1000, \"sinistro\", \"R\", \"half\", 1.2),\n        ]", "name": "benchmarks.MemComputation.mem_exposure_time_calc", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "7324e7c68d6d949b68bd80b0974a7ff8bbe7f83df900f43e3c8541eec7638324"}, "benchmarks.MemComputation.mem_moon_phase_to_numeric": {"code": "class MemComputation:\n    def mem_moon_phase_to_numeric(self):\n        \"\"\"\n        Benchmark the memory usage of the moon_phase_to_numeric function.\n    \n        This benchmark measures the memory usage when converting various moon\n        phases ('new', 'half', 'full') to their numeric representations.\n        \"\"\"\n        return [moon_phase_to_numeric(phase) for phase in [\"new\", \"half\", \"full\"]]", "name": "benchmarks.MemComputation.mem_moon_phase_to_numeric", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "43d15cfc9c25b49767c0e6035bbb62092fc0487d0b7da345f0c7e9f2e02c014a"}, "benchmarks.MemComputation.mem_radial_integrate_gauss": {"code": "class MemComputation:\n    def mem_radial_integrate_gauss(self):\n        \"\"\"\n        Benchmark the memory usage of the radial_integrate_gauss function.\n    \n        This benchmark measures the memory usage when calculating the radial\n        integral of a Gaussian function for different radius values (1.0, 2.0, 0.0).\n        \"\"\"\n        return [radial_integrate_gauss(R, 1.0) for R in [1.0, 2.0, 0.0]]", "name": "benchmarks.MemComputation.mem_radial_integrate_gauss", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "956b4574a569c69d774bab5e5fad2cb31fdc9dc66ec4cb1a962477993a6bdbc0"}, "benchmarks.MemComputation.mem_telescope_to_index": {"code": "class MemComputation:\n    def mem_telescope_to_index(self):\n        \"\"\"\n        Benchmark the memory usage of the telescope_to_index function.\n    \n        This benchmark measures the memory usage when converting various\n        telescope names ('sbig', 'sinistro', 'qhy', 'spectral', 'muscat3')\n        to their corresponding indices.\n        \"\"\"\n        return [\n            telescope_to_index(telescope) for telescope in [\"sbig\", \"sinistro\", \"qhy\", \"spectral\", \"muscat3\"]\n        ]", "name": "benchmarks.MemComputation.mem_telescope_to_index", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "3551582cb72c8c8b62e4d6a3f249b53f0aa90db5a383c46c261097b6bee6b80a"}, "benchmarks.TimeComputation.time_exposure_time_calc": {"code": "class TimeComputation:\n    def time_exposure_time_calc(self):\n        \"\"\"\n        Benchmark the exposure_time_calc function for different input scenarios.\n    \n        This benchmark measures the time taken to calculate the exposure time,\n        signal-to-noise ratio, and magnitude for various sets of inputs.\n        \"\"\"\n        exposure_time_calc(10.0, 20, None, \"sinistro\", \"V\", \"new\", 1.2)\n        exposure_time_calc(None, 15.0, 1.0, \"sinistro\", \"R\", \"half\", 1.2)\n        exposure_time_calc(15, None, 1.0, \"sbig\", \"U\", \"full\", 3)\n        exposure_time_calc(20, 15.0, None, \"spectral\", \"r\", \"new\", 1.5)\n        exposure_time_calc(None, 15.0, 1.0, \"qhy\", \"i\", \"new\", 2.7)\n        exposure_time_calc(5, None, 1.0, \"muscat3\", \"g\", \"new\", 1.2)\n        exposure_time_calc(None, 15.0, 1000, \"sinistro\", \"R\", \"half\", 1.2)", "min_run_count": 2, "name": "benchmarks.TimeComputation.time_exposure_time_calc", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "413b1b277080592f1f88be3248eebba3d760d61f7b9ed4c9e11efb5341b951f6", "warmup_time": -1}, "benchmarks.TimeComputation.time_moon_phase_to_numeric": {"code": "class TimeComputation:\n    def time_moon_phase_to_numeric(self):\n        \"\"\"\n        Benchmark the moon_phase_to_numeric function for different moon phases.\n    \n        This benchmark measures the time taken to convert various moon phases\n        ('new', 'half', 'full') to their numeric representations.\n        \"\"\"\n        for phase in [\"new\", \"half\", \"full\"]:\n            moon_phase_to_numeric(phase)", "min_run_count": 2, "name": "benchmarks.TimeComputation.time_moon_phase_to_numeric", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9e74dd2ae85624fb1447e5a9b0de54c7926c61cacfddd7de48e94c3b82231dbe", "warmup_time": -1}, "benchmarks.TimeComputation.time_radial_integrate_gauss": {"code": "class TimeComputation:\n    def time_radial_integrate_gauss(self):\n        \"\"\"\n        Benchmark the radial_integrate_gauss function for different radii.\n    \n        This benchmark measures the time taken to calculate the radial integral\n        of a Gaussian function for different radius values (1.0, 2.0, 0.0).\n        \"\"\"\n        for R in [1.0, 2.0, 0.0]:\n            radial_integrate_gauss(R, 1.0)", "min_run_count": 2, "name": "benchmarks.TimeComputation.time_radial_integrate_gauss", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "070ff56805105e38e0d8d9998f5fbf2777433511039fba39cfbceed99b340700", "warmup_time": -1}, "benchmarks.TimeComputation.time_telescope_to_index": {"code": "class TimeComputation:\n    def time_telescope_to_index(self):\n        \"\"\"\n        Benchmark the telescope_to_index function for different telescope names.\n    \n        This benchmark measures the time taken to convert various telescope names\n        ('sbig', 'sinistro', 'qhy', 'spectral', 'muscat3') to their corresponding indices.\n        \"\"\"\n        for telescope in [\"sbig\", \"sinistro\", \"qhy\", \"spectral\", \"muscat3\"]:\n            telescope_to_index(telescope)", "min_run_count": 2, "name": "benchmarks.TimeComputation.time_telescope_to_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2102899995df3f172f26d0626c31083d2d3cda71baa5adf344dd4947e593f180", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}